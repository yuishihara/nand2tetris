// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Decode instruction
    Not(in=instruction[15], out=isInstructionA);
    Or(a=isInstructionA, b=instruction[5], out=saveA);
    And(a=instruction[15], b=instruction[12], out=useM);
    And(a=instruction[15], b=instruction[3], out=writeM);
   
    And(a=instruction[15], b=instruction[11], out=zx); // zx
    And(a=instruction[15], b=instruction[10], out=nx); // nx
    And(a=instruction[15], b=instruction[9], out=zy);  // zy
    And(a=instruction[15], b=instruction[8], out=ny);  // ny
    And(a=instruction[15], b=instruction[7], out=f);   // f
    And(a=instruction[15], b=instruction[6], out=no);  // no

    Mux16(a=instruction, b=prevALUdata, sel=instruction[15], out=toARegister);
    ARegister(in=toARegister, load=saveA, out=AData, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=saveD);
    DRegister(in=toDRegister, load=saveD, out=DData);

    Mux16(a=AData, b=inM, sel=useM, out=AorMData);

    ALU(x=DData, y=AorMData, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=prevALUdata, 
        out=toDRegister, out[15]=vlt0, out[0..7]=ldata, out[8..14]=hdata);

    And(a=instruction[0], b=instruction[15], out=igt0);
    And(a=instruction[1], b=instruction[15], out=ieq0);
    And(a=instruction[2], b=instruction[15], out=ilt0);

    Or8Way(in=ldata, out=poscheck);
    Or8Way(in[0..6]=hdata, in[7]=poscheck, out=isplus);
    Not(in=vlt0, out=signbit);
    And(a=signbit, b=isplus, out=vgt0);
    Not(in=isplus, out=iszero);
    And(a=signbit, b=iszero, out=veq0);

    And(a=igt0, b=vgt0, out=jgt0);
    And(a=ieq0, b=veq0, out=jeq0);
    And(a=ilt0, b=vlt0, out=jlt0);

    Or8Way(in[0]=jgt0, in[1]=jeq0, in[2]=jlt0, in[3..7]=false, out=jmp);

    Not(in=jmp, out=inc);
    PC(in=AData, inc=inc, load=jmp, reset=reset, out[0..14]=pc);
}